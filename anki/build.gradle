plugins {
  id "java"
}
sourceCompatibility = 1.11
compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

version = '1.0'

repositories {
    mavenCentral()
}

sourceSets {
  prod {
    compileClasspath += sourceSets.main.output
    runtimeClasspath += sourceSets.main.output
  }
}

configurations {
  prodImplementation.extendsFrom implementation
  prodRuntimeOnly.extendsFrom runtimeOnly
  previewMedia {
    canBeResolved = false
    canBeConsumed = true
  }
}


dependencies {
    implementation project(":scales")
    implementation 'com.google.guava:guava:29.0-jre'
    implementation 'com.github.spullara.mustache.java:compiler:0.9.4'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.11.4'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.11.4'
    implementation 'org.apache.commons:commons-math3:3.6.1'    
    implementation 'org.jgrapht:jgrapht-core:1.5.1'
    
    testImplementation 'junit:junit:4.13'
    testImplementation 'org.assertj:assertj-core:3.18.1'
    testImplementation 'org.mockito:mockito-core:3.6.0'
    testImplementation testFixtures(project(":scales"))
	
    prodImplementation 'junit:junit:4.13'
    
    compileOnly 'org.projectlombok:lombok:1.18.20'
	annotationProcessor 'org.projectlombok:lombok:1.18.20'
	
	testCompileOnly 'org.projectlombok:lombok:1.18.20'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.20'    

	prodCompileOnly 'org.projectlombok:lombok:1.18.20'
	prodAnnotationProcessor 'org.projectlombok:lombok:1.18.20'    

	previewMedia files("build/preview")
}

artifacts {
	previewMedia(file("build/preview")) {
      builtBy 'generateAndProcessPreviewMedia'
    }
}


jar {
    manifest {
        attributes (
"Implementation-Title": "AnkiJazz",
"Bundle-License": "http://www.fsf.org/licensing/licenses/agpl-3.0.html",
"Bundle-Copyright": "(C) 2021 Andreas Voss - mail@ankijazz.com",
"Implementation-Vendor-Id": "com.ankijazz"
        )
    }
}


test {
  useJUnit()
  filter {
    includeTestsMatching "*Test"
  }
}


/*
 * Generate Media
 */

def ankiAsset = "$projectDir/src/assets/build.zip"

task copyAnkiAssets(type:Copy) {
  from ('src/assets') {
    include ('*.png', '*.mp3', '*.ly')
  } 
  into 'build/anki'
}

task copyPreviewAssets(type:Copy) {
  from ('src/assets') {
    include ('*.png', '*.mp3', '*.ly')
  } 
  into 'build/preview'
}
 
task generateRawMedia(type: Test) {
  useJUnit()
  description = 'Generate raw media for Anki decks, to be be processed in docker container'
  group = 'verification'
  testClassesDirs = sourceSets.prod.output.classesDirs
  classpath = sourceSets.prod.runtimeClasspath
}

def dockerCommandLine(path) {
  return ["docker", "run", "--rm", "--mount", "type=bind,source=$projectDir/build,target=/mnt", "--name", "ankijazz", "avoss/ankijazz", "//mnt/$path"]
}


task generateAndProcessPreviewMedia(type:Exec) {
  onlyIf { ! file("${buildDir}/preview/.media-processed").exists() }
  dependsOn copyPreviewAssets
  dependsOn generateRawMedia
  workingDir "$projectDir"
  group = BasePlugin.BUILD_GROUP
  commandLine dockerCommandLine("preview")
}


task generateAndProcessAnkiMedia(type:Exec) {
  onlyIf { ! file("${buildDir}/anki/.media-processed").exists() }
  dependsOn copyAnkiAssets
  dependsOn generateRawMedia
  workingDir "$projectDir"
  group = BasePlugin.BUILD_GROUP
  commandLine dockerCommandLine("anki") 
}

task processPreviewMedia(type:Exec) {
  workingDir "$projectDir"
  description = 'for development only, processes whatever media are present in preview directory'
  group = BasePlugin.BUILD_GROUP
  commandLine dockerCommandLine("preview") 
}


/*
 * Generate Anki Profile with/without Media
 */

task deleteAnkiProfile(type: Delete) {
  delete "${ankiProfile}"
}

task buildAnkiProfileFromAsset(type: Copy) {
  dependsOn deleteAnkiProfile
  from zipTree("${ankiAsset}")
  into "${ankiProfile}"
}

task deleteAnkiAsset(type: Delete) {
  delete "${ankiAsset}"
}

task buildAnkiAssetFromProfile(type: Zip) {
  dependsOn deleteAnkiAsset
  description = 'for development only, updates asset with changes made on Anki profile'
  archiveFileName = "build.zip"
  destinationDirectory = file("src/assets")
  from "${ankiProfile}"
}

task buildAnkiProfile(type: Copy) {
  dependsOn buildAnkiProfileFromAsset
  dependsOn generateAndProcessAnkiMedia
  from ("build/anki") {
    include ('*.png', '*.mp3')
  }
  into "${ankiProfile}/collection.media"
}
