plugins {
  id "java"
}
sourceCompatibility = 1.11
compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

version = '1.0'

repositories {
    mavenCentral()
}

sourceSets {
  prod {
    compileClasspath += sourceSets.main.output
    runtimeClasspath += sourceSets.main.output
  }
}

configurations {
  prodImplementation.extendsFrom implementation
  prodRuntimeOnly.extendsFrom runtimeOnly
}



dependencies {
    implementation 'com.google.guava:guava:29.0-jre'
    implementation "com.google.inject:guice:3.0"
    implementation 'com.google.inject.extensions:guice-assistedinject:3.0'
    implementation 'com.google.inject.extensions:guice-multibindings:3.0'
    implementation 'com.github.spullara.mustache.java:compiler:0.9.4'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.11.4'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.11.4'
    implementation 'org.apache.commons:commons-math3:3.6.1'    
    implementation 'org.jgrapht:jgrapht-core:1.5.1'
    
    testImplementation 'junit:junit:4.13'
    testImplementation 'org.assertj:assertj-core:3.18.1'
    testImplementation 'org.mockito:mockito-core:3.6.0'

    prodImplementation 'junit:junit:4.13'
    
    compileOnly 'org.projectlombok:lombok:1.18.20'
	annotationProcessor 'org.projectlombok:lombok:1.18.20'
	
	testCompileOnly 'org.projectlombok:lombok:1.18.20'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.20'    

	prodCompileOnly 'org.projectlombok:lombok:1.18.20'
	prodAnnotationProcessor 'org.projectlombok:lombok:1.18.20'    
}

jar {
    manifest {
        attributes (
"Implementation-Title": "Scales Core",
"Bundle-License": "http://www.fsf.org/licensing/licenses/agpl-3.0.html",
"Bundle-Copyright": "(C) 2021 Andreas Voss - mail@jlab.de",
"Implementation-Vendor-Id": "de.jlab.scales"
        )
    }
}


test {
  useJUnit()
  filter {
    includeTestsMatching "*Test"
  }
}

task createRawMedia(type: Test) {
  dependsOn build
  useJUnit()
  description = 'Generate raw media for Anki decks, must be processed in linux'
  group = 'verification'
  testClassesDirs = sourceSets.prod.output.classesDirs
  classpath = sourceSets.prod.runtimeClasspath
  shouldRunAfter test
}

build {
  dependsOn("copyAnkiAssets")
  dependsOn("copyPreviewAssets")
}

clean {
  dependsOn("cleanWebsite")
}

def webappDir = "$projectDir/src/main/webapp"
def previewDir = "$webappDir/src/assets/preview"
def ankiAsset = "$projectDir/src/assets/build.zip"

task copyAnkiAssets(type:Copy) {
  from ('src/assets') {
    include ('*.png', '*.mp3', '*.ly')
  } 
  into 'build/anki'
}

task copyPreviewAssets(type:Copy) {
  from ('src/assets') {
    include ('*.png', '*.mp3', '*.ly')
  } 
  into 'build/preview'
}

task deleteWebsitePreview(type: Delete) {
  delete "${previewDir}"
}

task createWebsitePreview(type:Copy) {
  dependsOn "deleteWebsitePreview"
  from ('build/preview') {
    include ('*.png', '*.mp3', '*.html', "*.json")
  } 
  into "${previewDir}"
}


task deleteAnkiProfile(type: Delete) {
  delete "${ankiProfile}"
}

task createEmptyAnkiProfile(type: Copy) {
  dependsOn "deleteAnkiProfile"
  from zipTree("${ankiAsset}")
  into "${ankiProfile}"
}

task createAnkiProfileWithMedia(type: Copy) {
  dependsOn "createEmptyAnkiProfile"
  from ("build/anki") {
    include ('*.png', '*.mp3')
  }
  into "${ankiProfile}/collection.media"
}

task deleteAnkiAsset(type: Delete) {
  delete "${ankiAsset}"
}

task createAnkiAssetFromProfile(type: Zip) {
  dependsOn "deleteAnkiAsset"
  archiveFileName = "build.zip"
  destinationDirectory = file("src/assets")
  from "${ankiProfile}"
}

task createWebsite(type:Exec) {
  dependsOn "createWebsitePreview"
  workingDir "$webappDir"
  group = BasePlugin.BUILD_GROUP
  commandLine "ng.cmd", "build"
}

task cleanWebsite(type: Delete) {
  delete "$previewDir", "$webappDir/dist"
  followSymlinks = false
}

