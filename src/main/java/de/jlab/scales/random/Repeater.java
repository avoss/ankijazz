package de.jlab.scales.random;

/**
 * records a sequence of values generated by a delegate and plays it back
 * (several times). After playback has finished, switches back to record mode to
 * record the next sequence of values
 */
public class Repeater<T> implements Sequence<T> {

  private int size;
  private Appender<T> appender;

  public Repeater(Sequence<T> source, int repeatCount) {
    this(null, source, repeatCount);
  }

  public Repeater(Context context, Sequence<T> source, int repeatCount) {
    size = source.size() * (repeatCount + 1);
    Recorder<T> recorder = new Recorder<T>(context, source);
    appender = new Appender<T>(context, recorder);
    for (int i = 0; i < repeatCount; i++)
      appender.append(recorder.playback());
  }

  @Override
  public T next() {
    return appender.next();
  }

  @Override
  public void reset() {
    appender.reset();
  }

  @Override
  public int size() {
    return size;
  }

}
